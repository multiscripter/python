# --- 6.1 Подробнее о списках. ---
a = [0]
print(a)  # [0]

a.append(1)
print(a)  # [0, 1]

# a.extend(list)
a.extend([2, 3])
print(a)  # [1, 2, 3]

# a[len(a):] = 4 # Ошибка!
a[len(a):] = [4]
print(a)  # [1, 2, 3, 4]

# a.insert(index, value)
a.insert(5, 5)  # [1, 2, 3, 4, 5]
print(a)

a.remove(0)
print(a)  # [1, 2, 3, 4, 5]

a.pop(2)
print(a)  # [1, 2, 4, 5]

print(a.index(1))  # 10

a.append(5)
print(a.count(5))  # 2

a[1:2] = [7, 6]
print(a)  # [1, 7, 6, 4, 5, 5]

a.sort()
print(a)  # [1, 4, 5, 5, 6, 7]

a.reverse()  # [7, 6, 5, 5, 4, 1]
print(a)


# --- 6.1.1. Использование списка в качестве очереди. ---
a.append(10)  # Добавить на вершину стэка (в конец списка).
print(a)  # [7, 6, 5, 5, 4, 1, 10]
a.pop()  # Взять с вершины стэка (из конца списка).
print(a)  # [7, 6, 5, 5, 4, 1]

# --- 6.1.2. Использование списка в качестве очереди. ---
a.append(11)  # Добавить в конец очереди (в конец списка).
print(a)  # [7, 6, 5, 5, 4, 1, 11]
a.pop(0)  # Взять из начала очереди (списка).
print(a)  # [6, 5, 5, 4, 1, 11]

# --- 6.1.3. Генераторы списков. ---
vec = [2, 4, 6]
b = [3 * x for x in vec]
print(b)  # [6, 12, 18]

# Списки внутри списка.
b = [[x, x**2] for x in vec]
print(b)  # [[2, 4], [4, 16], [6, 36]]
# Кортежи внутри списка.
b = [(x, x**2) for x in vec]
print(b)  # [(2, 4), (4, 16), (6, 36)]

freshFruit = ['  a', '  b ', 'ad hoc  ']
b = [weapon.strip() for weapon in freshFruit]
print(b)  # ['a', 'b', 'ad hoc']

b = [3 * x for x in vec if x > 3]
print(b)  # [12, 18]
b = [3*x for x in vec if x < 2]
print(b)  # []

# Примеры по-сложнее.
vec1 = ['a', 'b', 'c']
vec2 = ['x', 'y', 'z']
b = [x + y for x in vec1 for y in vec2]
print(b)  # ['ax', 'ay', 'az', 'bx', 'by', 'bz', 'cx', 'cy', 'cz']

b = [str(round(355/113, i)) for i in range(1, 6)]
print(b)  # ['3.1', '3.14', '3.142', '3.1416', '3.14159']

# --- 6.1.4. Вложенные сборщики списков. ---
mat = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]
# Поменять строки и столбцы местами.
b = [[row[i] for row in mat] for i in [0, 1, 2]]
print(b)  # [[1, 4, 7], [2, 5, 8], [3, 6, 9]]

# Более многословный вариант:
b = []
for i in [0, 1, 2]:
    lst = []
    for row in mat:
        lst.append(row[i])
    b.append(lst)
print(b)  # [[1, 4, 7], [2, 5, 8], [3, 6, 9]]

# Вместо изобретения велосипедов лучше использовать функции:
print(list(zip(*mat)))  # [(1, 4, 7), (2, 5, 8), (3, 6, 9)]

# Просто демострация мощи инструмента:
# Получение единичной матрицы порядка n:
n = 3
print([[0]*i+[1]+[0]*(n-i-1) for i in range(n)])
# [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
