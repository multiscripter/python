s = 'Hello, World.'
print(str(s)) # Hello, World.
print(repr(s)) # 'Hello, World.'
print(str(0.1))
print(repr(0.1))

# Выравненный вывод.
for x in range(1, 11):
	print('{0:2d} {1:3d} {2:4d}'.format(x, x * x, x * x * x))

print('a'.rjust(11)) # Выровнять по правому краю в строке, шириной 11 символов.
print('a'.center(11)) # Выровнять по правому краю в строке, шириной 11 символов.

# Основной способ применения метода str.format()
print('Мы — те {0}, что говорят "{1}!"'.format('рыцари', 'Ни'))
print('Мы — те {1}, что говорят "{0}!"'.format('рыцари', 'Ни'))
print('Мы — те {aa}, что говорят "{nn}!"'.format(aa = 'рыцари', nn = 'Ни'))

# Позиционные и именованные параметры можно произвольно совмещать.
print('История о {0}е, {1}е, и {other}е.'.format('Билл', 'Манфред', other='Георг'))

# После имени поля может следовать необязательный спецификатор формата ‘:’. 
# С его помощью можно управлять форматированием значения.
PI = 3.14159265358979323
print('Значение ПИ — примерно {0:.3f}.'.format(PI)) # 3.142 - он ещё и округлил!

# После спецификатора ‘:’ можно указать число — минимальную ширину поля, выраженную в количестве символов. 
# Это удобно использовать для создания красивых таблиц:
table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678}
for name, phone in table.items():
	print('{0:10} ==> {1:10d}'.format(name, phone))

# Если ваша строка с форматами очень длинна, а вы не хотите разбивать её на подстроки, 
# было бы неплохо если бы вы могли ссылаться на переменные, 
# предназначенные для форматирования, не по позиции, а по имени. 
# Это можно сделать, просто передав словарь и используя квадратные скобки ‘[]’ для доступа к ключам.
table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}
print('Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; '
	'Dcab: {0[Dcab]:d}'.format(table))

# Тоже самое можно сделать, передав словарь именованных параметров, используя нотацию «**»:
table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}
print('Jack: {Jack:d}; Sjoerd: {Sjoerd:d}; Dcab: {Dcab:d}'.format(**table))